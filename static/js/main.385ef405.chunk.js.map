{"version":3,"sources":["Header.js","OperationButtons.js","SelectionRadios.js","RingTable.js","App.js","reportWebVitals.js","index.js"],"names":["Header","brand","links","theme","Navbar","fixed","bg","variant","Brand","Nav","className","map","link","Link","href","OperationButtons","onClick","Button","SelectionRadios","radiosText","selected","onSelect","Form","style","margin","text","Check","inline","label","value","type","onChange","e","target","checked","getBadgeVariant","status","RingTable","rows","Table","bordered","row","index","Badge","windows","linux","unix","App","state","allData","displayedData","operation","statusToShow","fetch","then","response","json","data","setState","prevProps","prevState","this","filteredData","filter","changedData","action","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.385ef405.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nconst Header = ({ brand, links, theme }) => (\n  <Navbar fixed=\"top\" bg={theme} variant={theme}>\n    <Navbar.Brand>{brand}</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      {links.map((link) => (\n        <Nav.Link href={`#${link}`}>{link}</Nav.Link>\n      ))}\n    </Nav>\n  </Navbar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./OperationButtons.css\";\n\nconst OperationButtons = ({ onClick }) => (\n  <div className=\"operation-buttons\">\n    <Button variant=\"outline-primary\" onClick={() => onClick(\"start\")}>\n      Start\n    </Button>\n    <Button variant=\"outline-secondary\" onClick={() => onClick(\"pause\")}>\n      Pause\n    </Button>\n    <Button variant=\"outline-danger\" onClick={() => onClick(\"abort\")}>\n      Abort\n    </Button>\n  </div>\n);\n\nexport default OperationButtons;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\nconst SelectionRadios = ({ radiosText, selected, onSelect }) => (\n  <Form>\n    <div style={{ margin: \"12px\" }}>\n      {radiosText.map((text) => (\n        <Form.Check\n          inline\n          label={text}\n          value={text}\n          type=\"radio\"\n          key={`selection-radio-${text}`}\n          onChange={(e) => onSelect(e.target.value)}\n          checked={selected === text}\n        />\n      ))}\n    </div>\n  </Form>\n);\n\nexport default SelectionRadios;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Badge from \"react-bootstrap/Badge\";\n\nconst getBadgeVariant = (status) => {\n  switch (status) {\n    case \"Complete\":\n      return \"success\";\n\n    case \"Ongoing\":\n      return \"warning\";\n\n    case \"Failed\":\n      return \"danger\";\n\n    case \"Aborted\":\n      return \"dark\";\n\n    default:\n      return \"secondary\";\n  }\n};\n\nconst RingTable = ({ rows }) => (\n  <Table bordered>\n    <thead>\n      <tr>\n        <th></th>\n        <th>Rollout Status</th>\n        <th>Windows</th>\n        <th>Linux</th>\n        <th>Unix</th>\n      </tr>\n    </thead>\n    <tbody>\n      {rows.map((row, index) => (\n        <tr key={`ring-row${index}`}>\n          <td>{row.target}</td>\n          <td>\n            <Badge variant={getBadgeVariant(row.status)}>{row.status}</Badge>\n          </td>\n          <td>{row.windows}</td>\n          <td>{row.linux}</td>\n          <td>{row.unix}</td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nexport default RingTable;\n","import { Component } from \"react\";\nimport Header from \"./Header\";\nimport OperationButtons from \"./OperationButtons\";\nimport SelectionRadios from \"./SelectionRadios\";\nimport RingTable from \"./RingTable\";\n\nclass App extends Component {\n  state = {\n    allData: [],\n    displayedData: [],\n    operation: \"\",\n    statusToShow: \"All\",\n  };\n\n  componentDidMount() {\n    fetch(\"https://run.mocky.io/v3/adc0e655-b26f-4738-a0d8-9cc976a8fa36\")\n      .then((response) => response.json())\n      .then((data) => this.setState({ allData: data, displayedData: data }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.statusToShow !== this.state.statusToShow ||\n      prevState.allData !== this.state.allData\n    ) {\n      let filteredData = [];\n      if (this.state.statusToShow === \"All\") {\n        filteredData = this.state.allData;\n      } else {\n        filteredData = this.state.allData.filter(\n          (data) => data.status === this.state.statusToShow\n        );\n      }\n      this.setState({ displayedData: filteredData });\n    }\n\n    if (prevState.operation !== this.state.operation) {\n      let changedData = this.state.allData;\n      if (this.state.operation === \"start\") {\n        changedData = changedData.map((data) => ({\n          ...data,\n          status: data.status === \"Paused\" ? \"Ongoing\" : data.status,\n        }));\n      } else if (this.state.operation === \"pause\") {\n        changedData = changedData.map((data) => ({\n          ...data,\n          status: data.status === \"Ongoing\" ? \"Paused\" : data.status,\n        }));\n      } else if (this.state.operation === \"abort\") {\n        changedData = changedData.map((data) => ({\n          ...data,\n          status:\n            data.status === \"Paused\" || data.status === \"Ongoing\"\n              ? \"Aborted\"\n              : data.status,\n        }));\n      }\n      this.setState({ allData: changedData });\n    }\n  }\n  render() {\n    return (\n      <>\n        <Header\n          brand=\"React Workshop Lab\"\n          links={[\"Home\", \"Feeds\"]}\n          theme=\"dark\"\n        />\n        <OperationButtons\n          onClick={(action) => this.setState({ operation: action })}\n        />\n        <SelectionRadios\n          radiosText={[\n            \"Complete\",\n            \"Ongoing\",\n            \"Paused\",\n            \"Failed\",\n            \"Aborted\",\n            \"All\",\n          ]}\n          onSelect={(status) => this.setState({ statusToShow: status })}\n          selected={this.state.statusToShow}\n        />\n        <RingTable rows={this.state.displayedData} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}